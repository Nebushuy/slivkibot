import requests
import logging
import time
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup


logging.basicConfig(level=logging.INFO)
# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '6933425414:AAEsJVwHhOCzfW3dhzI0swz7sI4yAmojfIg'

# –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
CHAT_ID = ('-1002138041570')
#CHAT_ID = None
#Slivki ID -1002138041570
#My ID 196032615

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
#button = InlineKeyboardButton('–ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã', callback_data='get_rates')
#markup = InlineKeyboardMarkup().add(button)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
def get_rates():
    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞
    response = requests.get('https://openexchangerates.org/api/latest.json?app_id=edf031209d2241899c1d4da53330be08&base=USD&symbols=RUB')
    usd_rate = response.json()['rates']['RUB']

    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –¶–ë
    response = requests.get(
        'https://www.cbr-xml-daily.ru/daily_json.js')
    cbusd_rate_today = response.json()['Valute']['USD']['Value']
    cbusd_rate_yesterday = response.json()['Valute']['USD']['Previous']
    usd_din = cbusd_rate_today/cbusd_rate_yesterday - 1

    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –ï–≤—Ä–æ –¶–ë
    response = requests.get(
        'https://www.cbr-xml-daily.ru/daily_json.js')
    cbeur_rate_today = response.json()['Valute']['EUR']['Value']
    cbeur_rate_yesterday = response.json()['Valute']['EUR']['Previous']
    eur_din = cbeur_rate_today / cbeur_rate_yesterday - 1

    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞
    response = requests.get('https://api.coindesk.com/v1/bpi/currentprice/usd.json')
    btc_rate = response.json()['bpi']['USD']['rate_float']

    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å —ç—Ñ–∏—Ä–∏—É–º–∞
    response = requests.get('https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=USD')
    eth_rate = response.json()['ethereum']['usd']

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
    return f'‚úåÔ∏èüå±–õ–æ–≤–∏–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã:\nüíµUSD_CB: <b>{cbusd_rate_today:.2f}</b> RUB ({usd_din:.2%})\nüí∂EUR_CB: <b>{cbeur_rate_today:.2f}</b> RUB ({eur_din:.2%})\nüî•BTC: <b>{btc_rate:.2f}</b> USD\nüåêETH: <b>{eth_rate:.2f}</b> USD'
#üöÄUSD: <b>{usd_rate:.2f}</b> RUB\n
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    global CHAT_ID
    CHAT_ID = message.chat.id
    await bot.send_message(chat_id=CHAT_ID, text="–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç 3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç!")

@dp.message_handler(commands=['getrate'])
async def start_command(message: types.Message):
    global CHAT_ID
    CHAT_ID = message.chat.id
    #await message.reply("–ü—Ä–∏–≤–µ—Ç‚úåÔ∏èüå±! –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã'", reply_markup=markup)
    await send_rates(message)

#@dp.callback_query_handler(lambda c: c.data == 'get_rates')
#async def process_callback_get_rates(callback_query: types.CallbackQuery):
#    await send_rates(callback_query.message)
#    await bot.answer_callback_query(callback_query.id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def send_message():
    message = get_rates()
    await bot.send_message(chat_id=CHAT_ID, text=message, parse_mode='HTML')

async def send_rates(message: types.Message):
    await message.answer(get_rates(), parse_mode='HTML')

# –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def send_messages():
    while True:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        now = time.localtime()

        if now.tm_hour in [9, 14, 17]:
            await send_message()
        await asyncio.sleep(3600)


# –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def on_startup(dp):
    asyncio.create_task(send_messages())

if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup)
